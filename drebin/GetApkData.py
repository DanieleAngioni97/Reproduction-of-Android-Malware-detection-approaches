import sys

import os
import time

sys.path.append("Modules")
sys.path.append("androguard")
import re
import multiprocessing as mp

import CommonModules as CM
# from CommonModules import logger
from androguard.misc import AnalyzeAPK
from Modules import BasicBlockAttrBuilder as BasicBlockAttrBuilder
from Modules import PScoutMapping as PScoutMapping

from xml.dom import minidom     #mini Document Object Model for XML
import lxml 
import psutil, argparse, logging

import numpy as np

from sklearn.feature_extraction.text import CountVectorizer as CountV
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split

"""This script extract DREBIN's features from raw APK files.
Inputs are described in parseargs function.
The Outputs are the ".data" file that has the list of the extracted features and the manifest file.

"""

Extension = ".data"  #features files that are generated by GetApkData.py script ends with ".data"

def parseargs():
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--dir",
                        help="The path to the APK files directory", type=str, required=False,
                        default="/media/datasets/practicalDroid/data/malware/")
    parser.add_argument("-cp", "--cpu",
                        help="The number of CPUs to use, default value is the number of logical CPUs in the system",
                        type=int, required=False, default=int(psutil.cpu_count()*0.7))
    args = parser.parse_args()
    return args

def GetFromXML(ApkDirectoryPath, ApkFile, ag_out_1):
    '''
    Get requested permission etc. for an ApkFile from Manifest files.
    :param String ApkDirectoryPath
    :param String ApkFile
    :return RequestedPermissionSet
    :rtype Set([String])
    :return ActivitySet
    :rtype Set([String])
    :return ServiceSet
    :rtype Set([String])
    :return ContentProviderSet
    :rtype Set([String])
    :return BroadcastReceiverSet
    :rtype Set([String])
    :return HardwareComponentsSet
    :rtype Set([String])
    :return IntentFilterSet
    :rtype Set([String])
    '''
    ApkDirectoryPath = os.path.abspath(ApkDirectoryPath)
    ApkFileName = os.path.splitext(ApkFile)[0]

    RequestedPermissionSet = set()
    ActivitySet = set()
    ServiceSet = set()
    ContentProviderSet = set()
    BroadcastReceiverSet = set()
    HardwareComponentsSet = set()
    IntentFilterSet = set()
    xml_string = lxml.etree.tostring(ag_out_1.xml['AndroidManifest.xml'], pretty_print=True).decode()
    # try:
    #     ApkFile = os.path.abspath(ApkFile)
    #     f = open(os.path.splitext(ApkFile)[0] + ".xml", "w")
    #     f.write(xml_string)
    #     f.close()
    # except Exception as e:
    #     print(e)
    #     logger.error(e)
    #     logger.error("Executing Androlyze on " + ApkFile + " to get AndroidManifest.xml Failed.")
    #     return
    try:
        # f = open(ApkFileName + ".xml", "r")
        # Dom = minidom.parse(f)

        # parseString per evitare il salvataggio del file
        Dom = minidom.parseString(xml_string)

        # da qui in poi tutto uguale
        DomCollection = Dom.documentElement

        DomPermission = DomCollection.getElementsByTagName("uses-permission")

        list(map(
            lambda Permission: RequestedPermissionSet.add(
                Permission.getAttribute("android:name")),
            (Permission for Permission in DomPermission
             if Permission.hasAttribute("android:name"))))

        list(map(
            lambda Activity: ActivitySet.add(
                Activity.getAttribute("android:name")),
            (Activity for Activity in
             DomCollection.getElementsByTagName("activity")
             if Activity.hasAttribute("android:name"))))

        list(map(
            lambda Service: ServiceSet.add(
                Service.getAttribute("android:name")),
            (Service
             for Service in DomCollection.getElementsByTagName("service")
             if Service.hasAttribute("android:name"))))

        list(map(
            lambda Provider: ContentProviderSet.add(
                Provider.getAttribute("android:name")),
            (Provider
             for Provider in DomCollection.getElementsByTagName("provider")
             if Provider.hasAttribute("android:name"))
        ))

        list(map(
            lambda Receiver:  BroadcastReceiverSet.add(
                Receiver.getAttribute("android:name")),
            (Receiver
             for Receiver in DomCollection.getElementsByTagName("receiver")
             if Receiver.hasAttribute("android:name"))
        ))

        list(map(
            lambda HardwareComponent: HardwareComponentsSet.add(
                HardwareComponent.getAttribute("android:name")),
            (HardwareComponent
             for HardwareComponent in DomCollection.getElementsByTagName(
                "uses-feature")
             if HardwareComponent.hasAttribute("android:name"))))

        list(map(
            lambda Action: IntentFilterSet.add(
                Action.getAttribute("android:name")),
            (Action for Action in DomCollection.getElementsByTagName("action")
             if Action.hasAttribute("android:name"))))

    # todo: qui da errore per DestinatioFolder non referenziato
    except Exception as e:
        # logger.error(e)
        # logger.error("Cannot resolve " + DestinationFolder + "'s AndroidManifest.xml File!");
        return RequestedPermissionSet, ActivitySet, ServiceSet, ContentProviderSet, BroadcastReceiverSet, HardwareComponentsSet, IntentFilterSet
    finally:
        # f.close()
        return RequestedPermissionSet, ActivitySet, ServiceSet, ContentProviderSet, BroadcastReceiverSet, HardwareComponentsSet, IntentFilterSet


def GetFromInstructions(ApkDirectoryPath, ApkFile, PMap, RequestedPermissionSet,
                        ag_out_2, ag_out_3):
    '''
    Get required permissions, used Apis and HTTP information for an ApkFile.
    Reloaded version of GetPermissions.

    :param String ApkDirectoryPath
    :param String ApkFile
    :param PScoutMapping.PScoutMapping PMap
    :param RequestedPermissionList List([String])
    :return UsedPermissions
    :rtype Set([String])
    :return RestrictedApiSet
    :rtype Set([String])
    :return SuspiciousApiSet
    :rtype Set([String])
    :return URLDomainSet
    :rtype Set([String])
    '''

    UsedPermissions = set()
    RestrictedApiSet = set()
    SuspiciousApiSet = set()
    URLDomainSet = set()

    def save_url(URL):
        Domain = re.sub("https?://(.*)", "\g<1>",
                        re.search("https?://([^/:\\\\]*)", URL,
                                  re.IGNORECASE).group(), 0, re.IGNORECASE)
        URLDomainSet.add(Domain)

    for _dex in ag_out_2:
        for method in _dex.get_methods():
            g = ag_out_3.get_method(method)
            for BasicBlock in g.get_basic_blocks().get():
                Instructions = BasicBlockAttrBuilder.GetBasicBlockDalvikCode(BasicBlock)
                Apis, SuspiciousApis = BasicBlockAttrBuilder.GetInvokedAndroidApis(Instructions)
                Permissions, RestrictedApis = BasicBlockAttrBuilder.GetPermissionsAndApis(Apis, PMap,
                                                                                          RequestedPermissionSet)
                UsedPermissions = UsedPermissions.union(Permissions)
                RestrictedApiSet = RestrictedApiSet.union(RestrictedApis)
                SuspiciousApiSet = SuspiciousApiSet.union(SuspiciousApis)

                map(save_url,
                    (URLSearch.group() for Instruction in Instructions
                     for URLSearch in re.search("https?://([\da-z\.-]+\.[a-z\.]{2, 6}|[\d.]+)[^'\"]*", Instruction, re.IGNORECASE)
                     if URLSearch))

        # Got Set S6, S5, S7 described in Drebian paper
    return UsedPermissions, RestrictedApiSet, SuspiciousApiSet, URLDomainSet


def ProcessingDataForGetApkData(ApkDirectoryPath, ApkFile, PMap):
    '''
    Produce .data file for a given ApkFile.

    :param String ApkDirectoryPath: absolute path of the ApkFile directory
    :param String ApkFile: absolute path of the ApkFile
    :param PScoutMapping.PScoutMapping() PMap: PMap for API mapping

    :return Tuple(String, Boolean)  ProcessingResult: The processing result, (ApkFile, True/False)
    True means successful. False means unsuccessful.
    '''
    try:
        StartTime = time.time()
        # logger.info("Start to process " + ApkFile + "...")
        print("Start to process " + ApkFile + "...")
        DataDictionary = {}
        ag_out_1, ag_out_2, ag_out_3 = AnalyzeAPK(ApkFile)

        RequestedPermissionSet, ActivitySet, ServiceSet, ContentProviderSet, \
          BroadcastReceiverSet, HardwareComponentsSet, IntentFilterSet = \
            GetFromXML(ApkDirectoryPath, ApkFile, ag_out_1)

        # qui sono stati salvati gli xml
        RequestedPermissionList = list(RequestedPermissionSet)
        ActivityList = list(ActivitySet)
        ServiceList = list(ServiceSet)
        ContentProviderList = list(ContentProviderSet)
        BroadcastReceiverList = list(BroadcastReceiverSet)
        HardwareComponentsList = list(HardwareComponentsSet)
        IntentFilterList = list(IntentFilterSet)
        DataDictionary["RequestedPermissionList"] = RequestedPermissionList
        DataDictionary["ActivityList"] = ActivityList
        DataDictionary["ServiceList"] = ServiceList
        DataDictionary["ContentProviderList"] = ContentProviderList
        DataDictionary["BroadcastReceiverList"] = BroadcastReceiverList
        DataDictionary["HardwareComponentsList"] = HardwareComponentsList
        DataDictionary["IntentFilterList"] = IntentFilterList
        # Got Set S2 and others

        UsedPermissions, RestrictedApiSet, SuspiciousApiSet, URLDomainSet = \
            GetFromInstructions(ApkDirectoryPath, ApkFile, PMap,
                                RequestedPermissionSet, ag_out_2, ag_out_3)
        UsedPermissionsList = list(UsedPermissions)
        RestrictedApiList = list(RestrictedApiSet)
        SuspiciousApiList = list(SuspiciousApiSet)
        URLDomainList = list(URLDomainSet)
        DataDictionary["UsedPermissionsList"] = UsedPermissionsList
        DataDictionary["RestrictedApiList"] = RestrictedApiList
        DataDictionary["SuspiciousApiList"] = SuspiciousApiList
        DataDictionary["URLDomainList"] = URLDomainList
        # Set S6, S5, S7, S8
        # todo: qui posso prelevare il dizionario
        CM.ExportToJson(os.path.splitext(ApkFile)[0] + ".data", DataDictionary)
    except Exception as e:
        FinalTime = time.time()
        # logger.error(e)
        # logger.error(ApkFile + " processing failed in " + str(FinalTime - StartTime) + "s...")
        print(ApkFile + " processing failed in " + str(FinalTime - StartTime) + "s...")
        return ApkFile, False
    else:
        FinalTime = time.time()
        # logger.info(ApkFile + " processed successfully in " + str(FinalTime - StartTime) + "s")
        print(ApkFile + " processed successfully in " + str(FinalTime - StartTime) + "s")
        return ApkFile, True

def GetApkData(ProcessNumber, script_path, *ApkDirectoryPaths):
    '''
    Get Apk data dictionary for all Apk files under ApkDirectoryPath and store them in ApkDirectoryPath
    Used for next step's classification

    :param Tuple<string> *ApkDirectoryPaths: absolute path of the directories contained Apk files
    '''
    ApkFileList = []
    for ApkDirectoryPath in ApkDirectoryPaths:
        ApkFileList.extend(CM.ListApkFiles(ApkDirectoryPath))
        ApkFileList.extend(CM.ListFiles(ApkDirectoryPath, ""))
    # Because some apk files may not have extension....
    CWD = script_path
    os.chdir(os.path.join(CWD, "drebin", "Modules"))
    ''' Change current working directory to import the mapping '''
    PMap = PScoutMapping.PScoutMapping()
    os.chdir(CWD)
    pool = mp.Pool(int(ProcessNumber))
    ProcessingResults = []
    ScheduledTasks = []
    ProgressBar = CM.ProgressBar()
    for ApkFile in ApkFileList:
        if CM.FileExist(os.path.splitext(ApkFile)[0] + ".data"):
            pass
        else:
            # ProcessingDataForGetApkData(ApkDirectoryPath, ApkFile, PMap)
            ApkDirectoryPath = os.path.split(ApkFile)[0]
            ScheduledTasks.append(ApkFile)
            ProcessingResults = pool.apply_async(ProcessingDataForGetApkData, args=(ApkDirectoryPath, ApkFile, PMap),
                                                 callback=ProgressBar.CallbackForProgressBar)
    pool.close()
    if (ProcessingResults):
        ProgressBar.DisplayProgressBar(ProcessingResults, len(ScheduledTasks), type="hour")
    pool.join()

    return


if __name__ == '__main__':
    Args = parseargs()
    ProcessNumber = Args.cpu
    ApkDirectoryPaths = Args.dir

    script_path = "/home/dangioni/Reproduction-of-Android-Malware-detection-approaches"

    # from content root --> cd drebin
    # python /home/dangioni/Reproduction-of-Android-Malware-detection-approaches/drebin/GetApkData.py -d /media/datasets/practicalDroid/data/goodware
    # python /home/dangioni/Reproduction-of-Android-Malware-detection-approaches/drebin/GetApkData.py -d /media/datasets/practicalDroid/data/malware

    GetApkData(ProcessNumber, script_path, ApkDirectoryPaths)

